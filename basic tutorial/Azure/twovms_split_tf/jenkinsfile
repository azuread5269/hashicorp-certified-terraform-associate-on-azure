pipeline {
    agent none
    tools {
        terraform 'Terraform'
        }

    stages {
        
    stage('download git') {
    agent { label 'master' }
        steps {
        git branch: 'main', credentialsId: 'azuread5269', url: 'git@github.com:azuread5269/hashicorp-certified-terraform-associate-on-azure.git'
            }
        }
        stage('run build') {
        agent { label 'master' }
            steps {
                echo 'Run Terraform Build'
            }
        }
        stage('remove old Dirs for build') {
        agent { label 'master' }
            steps {
             powershell 'remove-Item C:\\terraform\\Jobs\\twovms_split_tf -force -Confirm:$false -Recurse -ErrorAction SilentlyContinue '
             powershell 'remove-Item C:\\terraform\\Jobs\\twovms_split_tf_reconfigure -force -Confirm:$false -Recurse -ErrorAction SilentlyContinue'
            }
        }
        stage('Copy Git Dirs for build') {
        agent { label 'master' }
            steps {
             powershell 'Copy-Item "C:\\Users\\svc_jenkins\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\Terraform\\basic tutorial\\Azure\\twovms_split_tf\\" -Recurse -Destination C:\\terraform\\Jobs\\ -force'
            }
        }
        stage('Copy Git Dirs for amend') {
        agent { label 'master' }
            steps {
             powershell 'Copy-Item "C:\\Users\\svc_jenkins\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\Terraform\\basic tutorial\\Azure\\twovms_split_tf_reconfigure\\" -Recurse -Destination C:\\terraform\\Jobs\\ -force'
            }
        }
        stage('Terraform build init And Apply') {
        agent { label 'master' }
            steps {
             bat ''' 
             cd C:\\terraform\\Jobs\\twovms_split_tf\\
             terraform init
             terraform apply --auto-approve
             '''
            }
        }
        
        stage('Set AZ VM extension for Ansible') {
        agent { label 'master' }
            steps {
            withCredentials([
                string(credentialsId: 'azauto', variable: 'password')
                ]) {
                    powershell "C:\\terraform\\Jobs\\twovms_split_tf\\ansible-enable.ps1 {$password}"
                }
            
            }
        }
 
        stage('Ansible playbook install web server') {
            agent { label 'ANSIBLE' }
            steps {
                sh '''
                cd /etc/ansible/projects/AnsibleProjects
                ansible-playbook _install_web_feature.yml
                '''
            }
        }
        stage('Test Web Server IIS') {
        agent { label 'master' }
         steps {
            script {
            try {
                powershell 'C:\\terraform\\Jobs\\twovms_split_tf\\invoke_pester_tests.ps1'
            }
            catch(exc) {
                echo 'Issue with pester tests'
                    }
                }
        
            }
        }
        stage('disable Public ip addresses on VMs') {
        agent { label 'master' }
            steps {
            withCredentials([
                string(credentialsId: 'azauto', variable: 'password')
                ]) {
                    powershell "C:\\terraform\\Jobs\\twovms_split_tf\\disable_vm_public_ips.ps1 {$password}"
                }
            
            }
        }
    
        stage('Test Web Server load balancer') {
        agent { label 'master' }
         steps {
            script {
            try {
                powershell 'C:\\terraform\\Jobs\\twovms_split_tf\\invoke_pester_lbtests.ps1'
            }
            catch(exc) {
                echo 'Issue with pester tests'
                }
            }
        
        }
    }
    stage('Pause') {
        agent { label 'master' }
            steps {
             bat ''' 
             timeout 30
             '''
            }
        }
   
    }
    
    post {
        always {
        calldestroy1()
        // calldestroy2()
        }
    
    }
}
// def calldestroy1() {
// node ('master'){
//     def err = null
//          echo "I am a windows host"
//          bat "ipconfig.exe"
//          bat "hostname.exe"
//          bat ''' 
//          cd C:\\terraform\\Jobs\\twovms_split_tf_remove_pub_ips\\
//          terraform init
//          terraform destroy --auto-approve
//          '''
//     }
// }
def calldestroy1() {
node ('master'){
    def err = null
         echo "I am a windows host"
         bat "ipconfig.exe"
         bat "hostname.exe"
         bat ''' 
         cd C:\\terraform\\Jobs\\twovms_split_tf\\
         terraform init
         terraform destroy --auto-approve
         '''
    }
}   
  
pipeline {
    agent none
    tools {
        terraform 'Terraform'
        }

stages {
        
    stage('download git on windows') {
        agent { label 'master' }
        steps {
                git branch: 'main', credentialsId: 'azuread5269', url: 'git@github.com:azuread5269/hashicorp-certified-terraform-associate-on-azure.git'
            }
        }
    stage('download git on linux') {
        agent { label 'ANSIBLE' }
            steps {
                git branch: 'main', credentialsId: 'azuread5269', url: 'git@github.com:azuread5269/hashicorp-certified-terraform-associate-on-azure.git'
            }
        }
    stage('whoami') {
        agent { label 'ANSIBLE' }
            steps {
                sh  'whoami'
            }
        }
    stage('Copy Git Dirs for build linux ') {
        agent { label 'ANSIBLE' }
            steps {
                sh  'sudo  cp -r "/home/pwaller/jenkinsfiles/workspace/test_output/basic tutorial/Azure/test_output" /etc/ansible/projects/AnsibleProjects/roles'
            }
        }
   
    stage('run build') {
        agent { label 'master' }
            steps {
                echo 'Run Terraform Build'
            }
        }
    stage('remove old Dirs for build') {
        agent { label 'master' }
            steps {
             powershell 'remove-Item C:\\terraform\\Jobs\\test_output -force -Confirm:$false -Recurse -ErrorAction SilentlyContinue '

            }
        }
    stage('Copy Git Dirs for build') {
        agent { label 'master' }
            steps {
             powershell 'Copy-Item "C:\\Users\\svc_jenkins\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\test_output\\basic tutorial\\Azure\\test_output\\" -Recurse -Destination C:\\terraform\\Jobs\\ -force'
            }
        }
    stage('Terraform build init And Apply') {
        agent { label 'master' }
            steps {
             bat ''' 
             cd C:\\terraform\\Jobs\\test_output\\
             terraform init
             terraform apply --auto-approve
             '''
            }
        }
    stage('Set AZ VM extension for Ansible') {
        agent { label 'master' }
            steps {
            withCredentials([
                string(credentialsId: 'azauto', variable: 'password')
                ]) {
                    powershell "C:\\terraform\\Jobs\\twovms_split_tf\\ansible-enable.ps1 {$password}"
                }
            
            }
        }
    stage('Obtain FQDNs from backend blob storage') {
        agent { label 'master' }
            steps {
            withCredentials([
                string(credentialsId: 'azauto', variable: 'password')
                ]) {
                    powershell "C:\\terraform\\Jobs\\test_output\\obtain_fqdns_from_state_file.ps1 {$password}"
                }
            
            }
        }
    stage('Copy FQDNs data to ansible') {
        agent { label 'master' }
            steps {
            withCredentials([
                string(credentialsId: 'azauto', variable: 'password')
                ]) {
                    powershell "C:\\terraform\\Jobs\\test_output\\copy_fqdns_to_ansible.ps1 {$ansiblepassword}"
                }
            
            }
        }
    stage('Create hosts file with FQDN data') {
        agent { label 'ANSIBLE' }
            steps {
            withCredentials([
                string(credentialsId: 'azauto', variable: 'password')
                ]) {
                    powershell "C:\\terraform\\Jobs\\test_output\\copy_fqdns_to_ansible.ps1 {$password}"
                }
            
            }
        }
  
  
  



    }
    /*
    post {
        always {
        calldestroy1()
        // calldestroy2()
        }
    
    }
    */
}
// def calldestroy1() {
// node ('master'){
//     def err = null
//          echo "I am a windows host"
//          bat "ipconfig.exe"
//          bat "hostname.exe"
//          bat ''' 
//          cd C:\\terraform\\Jobs\\twovms_split_tf_remove_pub_ips\\
//          terraform init
//          terraform destroy --auto-approve
//          '''
//     }
// }
def calldestroy1() {
node ('master'){
    def err = null
        //  echo "I am a windows host"
        //  bat "ipconfig.exe"
        //  bat "hostname.exe"
         bat ''' 
         cd C:\\terraform\\Jobs\\twovms_split_tf\\
         terraform init
         terraform destroy --auto-approve
         '''
    }
}   
  